@page "/"
@using DishesStore.Additional.Toast
@using DishesStore.Data
@using DishesStore.Db.Context
@using DishesStore.Db.Model

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore;
@inject IToastService toastService

<link href="_content/Blazored.Toast/bcontenttoast.css" rel="stylesheet" />

<PageTitle>Catalogue</PageTitle>

<div class="@blurclass">
    <div class="site-holder">
        <div class="main-container">
            <div>
                <h1 class="main-title">Dishes</h1>
            </div>

            <div class="filters-container">
                <div class="search-field">
                    <span class="search-label">Find by name</span>
                    <input class="input-field" maxlength="30" placeholder="Filters" @bind-value="searchQuery" @bind-value:event="oninput" />
                </div>
                <div class="categories-field">
                    <div class="categories">
                        <div class="">
                            <ul class="store-categories">
                                @{
                                    <li class="store-categories-element">
                                        <input class="store-categories-element-input" type='radio' value='0' name='radio' id='-1' @onclick="@((args)=>ChangeCategory(-1))" checked />
                                        <label class="category" for='-1'>All</label>
                                    </li>
                                    @foreach (var item in @DbService.Categories)
                                    {
                                        <li class="store-categories-element">
                                            <input class="store-categories-element-input" type='radio' value='@item.Id' name='radio' id='@item.Id' @onclick="@((args)=>ChangeCategory(item.Id))" />
                                            <label class="category" for='@item.Id'>@item.Name</label>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="stretched">
        <div class="assortment-container">
            @if (@DbService.Dishes.Count == 0 || (@searchQuery != string.Empty && @DbService.Dishes.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower())).ToList().Count == 0) || (CurrentCategory.Name != "All" && @DbService.Dishes.Where(x => x.Category.Id == CurrentCategory.Id).ToList().Count == 0))
            {
                <div class="assortment-container-stretched">Sorry! Nothing has been found by your query!</div>
            }
            else
            {
                @foreach (var item in CurrentCategory.Name == "All" ?
               (searchQuery == string.Empty ? @DbService.Dishes : @DbService.Dishes.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower()))).ToList() :
               (searchQuery == string.Empty ? @DbService.Dishes.Where(x => x.Category.Id == CurrentCategory.Id).ToList() :
               @DbService.Dishes.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower()))).ToList().Where(x => x.Category.Id == CurrentCategory.Id).ToList())
                {
                    <element @onclick="((args)=>ShowAdditionalPurchase(item))" class="card" style="display: flex; flex-direction: column; justify-content: space-between">
                        <div style="height: 40%; object-fit:contain;">
                            <img class="card-img" src=@(item.ImageUrl == string.Empty? "images/pizza-missing.png" : item.ImageUrl)>
                        </div>
                        @*<img class="card-img" src="@item.ImageUrl">*@
                        <div>
                            <div class="card-title">
                                @item.Name @if (item.Category.Name != null && item.Category.Name == "Vegan")
                                {
                                    <span style="color: #68c25a;">🌱</span>
                                }
                            </div>
                            <div class="card-calorie">Calorieness</div>
                            <div class="values-container">
                                <div class="checkbox-value checkbox-active">250 kcal</div>
                                <div class="checkbox-value">400 kcal</div>
                                <div class="checkbox-value">600 kcal</div>
                            </div>
                            <div class="purchase-segment">
                                <div class="card-price">$@item.Price</div>
                                @*<button id="@item.Id" @onclick="myScript1" @onclick:stopPropagation="true" @onclick:preventDefault="true"><svg class="purchase-button" id="PurchaseIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M24 3l-.743 2h-1.929l-3.474 12h-13.239l-4.615-11h16.812l-.564 2h-13.24l2.937 7h10.428l3.432-12h4.195zm-15.5 15c-.828 0-1.5.672-1.5 1.5 0 .829.672 1.5 1.5 1.5s1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5zm6.9-7-1.9 7c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5z" /></svg></button>*@
                                <button @onclick="@((args)=>FastPurchase(@item))" @onclick:stopPropagation="true" @onclick:preventDefault="true"><svg class="purchase-button" id="PurchaseIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M24 3l-.743 2h-1.929l-3.474 12h-13.239l-4.615-11h16.812l-.564 2h-13.24l2.937 7h10.428l3.432-12h4.195zm-15.5 15c-.828 0-1.5.672-1.5 1.5 0 .829.672 1.5 1.5 1.5s1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5zm6.9-7-1.9 7c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5z" /></svg></button>
                            </div>
                        </div>
                    </element>
                }
            }
        </div>
    </div>
</div>

<Confirmation @ref="confirmation" OnPurchase="OnPurchase">
    <div>
        <div class="item-display-container">
            <div class="img-display-holder">
                <img class="img-popup" src=@(DishOnScreen.dish.ImageUrl == string.Empty ? "images/pizza-missing.png" : DishOnScreen.dish.ImageUrl) />
            </div>

            <div class="additional-display-holder" style="display: flex; flex-direction: column; justify-content: space-between">
                <div>
                    <div class="additional-section">
                        <div class="display-item-values-container">
                            <div class="display-item-checkbox-value display-item-checkbox-active">250 kcal</div>
                            <div class="display-item-checkbox-value">400 kcal</div>
                            <div class="display-item-checkbox-value">600 kcal</div>
                        </div>
                        <div>
                            <button class="cross-btn" @onclick="Hide">&#9932;</button>
                        </div>
                    </div>
                    <div class="display-item-card-title">
                        @DishOnScreen.dish.Name @if (DishOnScreen.dish.Category.Name == "Vegan")
                        {
                            <span style="color: #68c25a;">🌱</span>
                        }
                    </div>
                    <div class="display-item-card-description" style="word-wrap: break-word;">@DishOnScreen.dish.Description</div>
                </div>

                <div>
                    <div>
                        <div>
                            @*proteins carbohydrates fats.*@
                        </div>

                        <div>
                            <div class="display-item-lower-container">
                                <div>
                                    <div class="amount-label">
                                        Amount
                                    </div>
                                    <div style="display:flex">
                                        <div class="input-modal">
                                            <span>@DishOnScreen.count</span>
                                        </div>
                                        <div class="btns-container">
                                            <div>
                                                <button class="modal-button-count btn-green" @onclick="CountIncrease">+</button>
                                            </div>
                                            <div>
                                                <button class="modal-button-count btn-red" @onclick="CountDecrease">-</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class="modal-section">
                                        <div class="modal-item-price-label">
                                            Price
                                        </div>
                                        <div class="modal-item-price">
                                            @DishOnScreen.dish.Price usd.
                                        </div>
                                        <div class="modal-item-totalprice">
                                            Total: <span style="font-family: 'Circe-B'">@(DishOnScreen.dish.Price * DishOnScreen.count) usd.</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-section modal-section-last">
                                    <div>
                                        <button @onclick="OnPurchase" type="button" class="btn btn-purchase">Purchase</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Confirmation>

@code {
    private string searchQuery = "";
    private string blurclass = "";

    private DishToOrder DishOnScreen = new DishToOrder();

    private Category CurrentCategory = new Category() { Name = "All" };

    private List<Dish> dishes = new List<Dish>();
    private List<Category> categories = new List<Category>();

    private ToastParameters? _toastParameters;

    private Confirmation confirmation;

    private void FastPurchase(Dish dish)
    {
        if (UserSession == null || DbService.Users.Where(x => x.SessionHash == UserSession).ToList().Count == 0)
        {
            NavigationManager.NavigateTo("/auth");
        }
        else
        {
            if (UserId != null && UserId != -1)
            {
                DbService.AddNewCartItem(UserId, dish.Id, 1);

                _toastParameters = new ToastParameters();
                if (Cart.CheckAvailability())
                {
                    _toastParameters.Add(nameof(Toast.Title), "Item has added to your Cart");
                    _toastParameters.Add(nameof(Toast.PizzaName), dish.Name);
                    _toastParameters.Add(nameof(Toast.PizzaCount), 1);
                    _toastParameters.Add(nameof(Toast.Description), "Added to your cart");
                    toastService.ShowToast<Toast>(_toastParameters, new ToastInstanceSettings(5, false));
                }
                else
                {
                    _toastParameters.Add(nameof(ToastError.Title), "No space left in your Cart.");
                    _toastParameters.Add(nameof(ToastError.Description), "Remove some dishes and try again!");
                    toastService.ShowToast<ToastError>(_toastParameters, new ToastInstanceSettings(5, false));
                }
            }
        }
    }

    private void ShowAdditionalPurchase(Dish dish)
    {
        if (UserSession == null || DbService.Users.Where(x => x.SessionHash == UserSession).ToList().Count == 0)
        {
            NavigationManager.NavigateTo("/auth");
        }
        else
        {
            DishOnScreen.dish = dish;
            DishOnScreen.count = 1;
            confirmation.Show();
            blurclass = "site-blur";
        }
    }

    private void CountIncrease() => DishOnScreen.count += (DishOnScreen.count == 10 ? 0 : 1);
    private void CountDecrease() => DishOnScreen.count -= (DishOnScreen.count == 1 ? 0 : 1);

    private void Hide()
    {
        confirmation.Hide();
        blurclass = "";
    }

    private void OnPurchase()
    {
        if (UserSession == null || DbService.Users.Where(x => x.SessionHash == UserSession).ToList().Count == 0)
        {
            NavigationManager.NavigateTo("/auth");
        }
        else
        {
            confirmation.Hide();

            if (UserId != null && UserId != -1)
            {
                DbService.AddNewCartItem(UserId, DishOnScreen.dish.Id, DishOnScreen.count);

                _toastParameters = new ToastParameters();
                if (Cart.CheckAvailability())
                {
                    _toastParameters.Add(nameof(Toast.Title), "Item has added to your Cart");
                    _toastParameters.Add(nameof(Toast.PizzaName), DishOnScreen.dish.Name);
                    _toastParameters.Add(nameof(Toast.PizzaCount), DishOnScreen.count);
                    _toastParameters.Add(nameof(Toast.Description), "Added to your cart");
                    toastService.ShowToast<Toast>(_toastParameters, new ToastInstanceSettings(5, false));
                }
                else
                {
                    _toastParameters.Add(nameof(ToastError.Title), "No space left in your Cart.");
                    _toastParameters.Add(nameof(ToastError.Description), "Remove some dishes and try again!");
                    toastService.ShowToast<ToastError>(_toastParameters, new ToastInstanceSettings(5, false));
                }
            }
        }
        blurclass = "";
    }

    private void ChangeCategory(int categoryId) => CurrentCategory = categoryId == -1 ? new Category() { Name = "All" } : DbService.Categories.First(x => x.Id == categoryId);

    private string UserName = string.Empty;
    private int UserId = -1;
    private string UserSession = string.Empty;

    protected override async void OnInitialized()
    {
        try
        {
            UserSession = await oLocalStore.GetItemAsync<string>("UserSession");

            if (UserSession == null)
            {
                await oLocalStore.ClearAsync();
            }
            else
            {
                UserId = DbService.Users.Where(x => x.SessionHash == UserSession).First().Id;
            }

            NavigationManager.NavigateTo("/");

            StateHasChanged();
        }
        catch (Exception) { }
    }

    
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        UserSession = oLocalStore.GetItemAsync<string>("UserSession").Result;

    //        if (UserSession == null)
    //        {
    //            oLocalStore.ClearAsync();
    //        }
    //        else
    //        {
    //            UserId = DbService.Users.Where(x => x.SessionHash == UserSession).First().Id;
    //        }

    //    }
    //}
}