@page "/auth"
@using DishesStore.Data
@using DishesStore.Db.Context
@using DishesStore.Db.Model.Auth
@using DishesStore.Db.Model.Auth.Registration

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore;

<PageTitle>Spicy Auth</PageTitle>


<div class="auth-stretched">
    <div class="auth-container">
        <div class="auth-section">
            <div class="auth-holder">
                @if (IsAuthenticating)
                {
                    <div class="auth-title">
                        Welcome Back..
                    </div>
                    <div class="auth-subtitle">
                        Please enter your email and password
                    </div>

                    <div class="auth-fields">
                        <div>
                            <input class="auth-field" @bind-value="authprops.Login" type="text" placeholder="Login" name="username" required>
                        </div>

                        <div style="margin-top: 10px">
                            <input class="auth-field" @bind-value="authprops.Pass" type="password" placeholder="Password" name="password" required>
                        </div>

                        <div>
                            <button class="enter-button-field" @onclick="Registration">Sign In</button>
                        </div>

                        @if (authprops.CheckForErrors())
                        {
                            <div style="color: #e4002b; font-family: 'Circe-R'">* @authprops.DisplayMessage()</div>
                        }

                        <div class="auth-subtitle auth-create-request">
                            Don't have an account yet? <button class="change-button" @onclick="ChangeAuthMode">Create account</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="auth-title">
                        Create your account
                    </div>
                    <div class="auth-subtitle">
                        Please enter your email, login and password
                    </div>

                    <div class="auth-fields">
                        <div>
                            <input class="auth-field" @bind-value="props.Mail" type="email" placeholder="Mail" name="usermail" required>
                        </div>

                        <div style="margin-top: 10px">
                            <input class="auth-field" @bind-value="props.Login" type="text" placeholder="Login" name="username" required>
                        </div>

                        <div style="margin-top: 10px">
                            <input class="auth-field" @bind-value="props.Pass" type="password" placeholder="Password" name="password" required>
                        </div>

                        <div style="margin-top: 10px">
                            <input class="auth-field" @bind-value="props.ConfirmPass" type="password" placeholder="Confirm Password" name="confirmpassword" required>
                        </div>

                        <div>
                            <button class="enter-button-field" @onclick="Registration">Sign Up</button>
                        </div>

                        @if (props.CheckForErrors())
                        {
                            <div style="color: #e4002b; font-family: 'Circe-R'">* @props.DisplayMessage()</div>
                        }

                        <div class="auth-subtitle auth-create-request">
                            Already have an account? <button class="change-button" @onclick="ChangeAuthMode">Login into your account</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private bool IsAuthenticating = true;

    private RegProps props = new RegProps();
    private AuthProps authprops = new AuthProps();

    private void Registration()
    {
        if (IsAuthenticating)
        {
            var response = Validate.CheckSigninProps(authprops.Login.ToLower(), authprops.Pass);
            authprops.SetMessage(response.Item1, response.Item2);

            if (response.Item1)
            {
                var SessionHash = BCrypt.Net.BCrypt.HashPassword($"{authprops.Login.ToLower()}{authprops.Pass}", BCrypt.Net.BCrypt.GenerateSalt());
                DbService.ChangeUserSession(authprops.Login.ToLower(), SessionHash);
                SaveSession(SessionHash, authprops.Login);

                NavigationManager.NavigateTo("/profile", true);
            }
            else
            {
            }
        }
        else
        {
            var response = Validate.CheckSignupProps(props.Mail.ToLower(), props.Login.ToLower(), props.Pass, props.ConfirmPass);
            props.SetMessage(response.Item1, response.Item2);

            if (response.Item1)
            {
                DbService.AddNewUser(props.Mail.ToLower(), props.Login.ToLower(), props.Pass);

                var SessionHash = BCrypt.Net.BCrypt.HashPassword($"{props.Login.ToLower()}{props.Pass}", BCrypt.Net.BCrypt.GenerateSalt());
                DbService.ChangeUserSession(props.Login.ToLower(), SessionHash);

                SaveSession(SessionHash, props.Login);

                NavigationManager.NavigateTo("/profile", true);
            }
            else
            {
            }
        }
    }

    private void ChangeAuthMode()
    {
        IsAuthenticating = !IsAuthenticating;
        props = new RegProps();
        authprops = new AuthProps();
    }

    private string UserName = string.Empty;
    private string UserSession = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var UserSession = await oLocalStore.GetItemAsync<string>("UserSession");

            if (DbService.Users.Any(x => x.SessionHash == UserSession))
            {
                NavigationManager.NavigateTo("/profile");
            }
        }
    }

    public void SaveSession(string UserSessionToSave, string UserNameToSave)
    {
        oLocalStore.SetItemAsStringAsync("UserSession", UserSessionToSave);
        oLocalStore.SetItemAsStringAsync("UserName", UserNameToSave);
    }

    public async void ClearSession()
    {
        await oLocalStore.ClearAsync();
        SaveSession(string.Empty, string.Empty);
    }

    public async void TryConnect()
    {
        string UserSession = await oLocalStore.GetItemAsync<string>("UserSession");
        string UserName = await oLocalStore.GetItemAsync<string>("UserName");

        if (UserSession != null && UserName != null)
        {
            //try
            //{

            //}
            //catch (Exception)
            //{
            //    ClearSession();
            //}
        }
        else
        {
            //ClearSession();
        }
    }
}
