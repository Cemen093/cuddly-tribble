@inherits LayoutComponentBase

@using Blazored.Toast.Configuration
@using DishesStore.Db.Context
@using DishesStore.Db.Model.Auth

<link href="css/header.css" rel="stylesheet" />

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore;

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<PageTitle>DishesStore</PageTitle>

<div class="page">
    @* <div class="sidebar">
        <NavMenu />
        </div>*@

    <main>
        <div class="header">
            <div>
                <NavLink href="/">
                    <button><h1 class="logo noselect">SpicyStore</h1></button>
                </NavLink>

            </div>
            <div class="buttons-container">
            </div>

            <div class="buttons-container">
                <NavLink href="/">
                    <button class="common-button">Dishes</button>
                </NavLink>
                @*
                    <NavLink href="/">
                    <button class="common-button">Beverages</button>
                    </NavLink>

                    <NavLink href="/menu">
                    <button class="common-button">Menu</button>
                    </NavLink>
                *@
                <NavLink href="/chat">
                    <button class="common-button">Online chat</button>
                </NavLink>

                @if (IsAdmin)
                {
                    <NavLink href="/admin">
                        <button class="common-button last-button">Admin Panel</button>
                    </NavLink>
                }

                <div class="vertical-divide"></div>

                <NavLink href="/cart">
                    @*<svg class="cart-button" id="Cart" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10 19.5c0 .829-.672 1.5-1.5 1.5s-1.5-.671-1.5-1.5c0-.828.672-1.5 1.5-1.5s1.5.672 1.5 1.5zm3.5-1.5c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5zm-10.563-5l-2.937-7h16.812l-1.977 7h-11.898zm11.233-5h-11.162l1.259 3h9.056l.847-3zm5.635-5l-3.432 12h-12.597l.839 2h13.239l3.474-12h1.929l.743-2h-4.195z" /></svg>*@
                    <svg class="cart-button" id="Cart" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M24 3l-.743 2h-1.929l-3.474 12h-13.239l-4.615-11h16.812l-.564 2h-13.24l2.937 7h10.428l3.432-12h4.195zm-15.5 15c-.828 0-1.5.672-1.5 1.5 0 .829.672 1.5 1.5 1.5s1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5zm6.9-7-1.9 7c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5z" /></svg>
                </NavLink>

                <button class="@(!IsLogined?"registration-button":"login-button common-button last-button")" style="@(IsLogined?"margin: 0 30px 0 20px":"")" @onclick="RedirectToAuth">@(IsLogined ? UserName:"Login")</button>
            </div>

        </div>

        <article>
            @Body
        </article>

        <div>
            <Footer />
        </div>
    </main>
</div>


@code {
    private string UserName = "";
    private string UserSession = "";
    private bool IsAdmin = false;
    private bool IsLogined = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var UserSession = await oLocalStore.GetItemAsync<string>("UserSession");
            UserName = await oLocalStore.GetItemAsync<string>("UserName");

            try
            {
                if (UserSession != null)
                {
                    if (DbService.Users.Any(x => x.SessionHash == UserSession))
                    {
                        var User = DbService.Users.First(x => x.SessionHash == UserSession);
                        IsAdmin = User.AdminRole;
                        IsLogined = true;
                    }
                }
            }
            catch (Exception)
            {
            }
        }
    }

    public async void ClearSession()
    {
        await oLocalStore.ClearAsync();
    }

    public void RedirectToAuth()
    {
        if (IsLogined)
        {
            NavigationManager.NavigateTo("/profile");
        }
        else
        {
            NavigationManager.NavigateTo("/auth");
        }
    }
}